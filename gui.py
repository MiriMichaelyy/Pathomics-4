#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 8.0
#  in conjunction with Tcl version 8.6
#    May 15,12:27:52 AM +0300  platform: Windows NT

# Standard library modules.
import os
import sys
import glob
import math
import pickle
import logging
import pathlib
import tkinter.font
import tkinter.filedialog
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
from distutils.dir_util import copy_tree

# Third party modules.
import PIL
import keras
import numpy
import scipy
import boruta
import pandas
import imageio
import IPython
import skimage
import sklearn
import seaborn
import lifelines
import reportlab
import matplotlib
import collections
import statsmodels
import sklearn.ensemble
from skimage.transform import resize
from PIL import ImageTk
from scipy.stats import *

# Local modules.
import pca
import anova
import logic
import utils
import inputs
import kmeans
import outputs
import preprocess

##############################
# SETUP                      #
##############################
seaborn.set()

# Override numpy types with python default types.
setattr(numpy, 'int',   numpy.int32)
setattr(numpy, 'float', numpy.float64)
setattr(numpy, 'bool',  numpy.bool_)

Groups = 'Line'
logging.getLogger('matplotlib.font_manager').disabled = True

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    style.theme_use('default')
    style.configure('.', font = "TkDefaultFont")
    if sys.platform == "win32":
       style.theme_use('winnative')   
    _style_code_ran = 1

from PIL import Image, ImageTk

##############################
# Class                      #
##############################
class MainPage:
    def __init__(self, top=None, assets=""):
        top.geometry("901x479+267+178")
        top.minsize(120, 1)
        top.maxsize(1684, 1031)
        top.resizable(0,  0)
        top.title("Pathomics 4")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="#000000")

        self.top           = top
        self.assets        = os.path.abspath(assets)
        self.input_format  = tk.StringVar(top)
        self.output_format = tk.StringVar(top)
        self.image_width   = tk.IntVar(top, value=256)
        self.image_height  = tk.IntVar(top, value=256)
        self.che77         = tk.IntVar(top, value=0)

        self.data_directory = tkinter.StringVar()
        self.data_directory.set("Not selected")
        self.dataset_path = tkinter.StringVar()
        self.dataset_path.set("Not selected")
        self.results_path = tkinter.StringVar()
        self.results_path.set("Not selected")
        self.model_path = tkinter.StringVar()
        self.model_path.set("Not selected")

        _style_code()
        self.Button2 = tk.Button(self.top)
        self.Button2.place(x=380, y=320, height=46, width=257)
        self.Button2.configure(activebackground="#d9d9d9")
        self.Button2.configure(activeforeground="black")
        self.Button2.configure(background="#d9d9d9")
        self.Button2.configure(cursor="fleur")
        self.Button2.configure(disabledforeground="#a3a3a3")
        self.Button2.configure(foreground="black")
        self.Button2.configure(highlightbackground="#d9d9d9")
        self.Button2.configure(highlightcolor="#000000")
        self.Button2.configure(text="Normalize")

        self.Button3 = tk.Button(self.top)
        self.Button3.place(x=380, y=370, height=46, width=257)
        self.Button3.configure(activebackground="#d9d9d9")
        self.Button3.configure(activeforeground="black")
        self.Button3.configure(background="#d9d9d9")
        self.Button3.configure(cursor="fleur")
        self.Button3.configure(disabledforeground="#a3a3a3")
        self.Button3.configure(foreground="black")
        self.Button3.configure(highlightbackground="#d9d9d9")
        self.Button3.configure(highlightcolor="#000000")
        self.Button3.configure(text="Setup Feature Extraction")

        self.Button1 = tk.Button(self.top)
        self.Button1.place(x=380, y=270, height=46, width=257)
        self.Button1.configure(activebackground="#d9d9d9")
        self.Button1.configure(activeforeground="black")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(cursor="fleur")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="black")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="#000000")
        self.Button1.configure(text="Preprocess Lab Images")

        self.Label1 = tk.Label(self.top)
        self.Label1.place(x=380, y=10, height=255, width=264)
        self.Label1.configure(activebackground="#d9d9d9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="black")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="#000000")
        photo_location = os.path.join(self.assets, "SmallLogo.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)

        self.Button4 = tk.Button(self.top)
        self.Button4.place(x=380, y=420, height=46, width=257)
        self.Button4.configure(activebackground="#d9d9d9")
        self.Button4.configure(activeforeground="black")
        self.Button4.configure(background="#d9d9d9")
        self.Button4.configure(disabledforeground="#a3a3a3")
        self.Button4.configure(foreground="black")
        self.Button4.configure(highlightbackground="#d9d9d9")
        self.Button4.configure(highlightcolor="#000000")
        self.Button4.configure(text="Train Models")

        self.Labelframe0 = tk.LabelFrame(self.top)
        self.Labelframe0.place(x=10, y=0, height=468, width=368)
        self.Labelframe0.configure(relief='groove')
        self.Labelframe0.configure(borderwidth="2")
        self.Labelframe0.configure(text="Input settings")
        self.Labelframe0.configure(relief="groove")
        self.Labelframe0.configure(background="#d9d9d9")
        self.Labelframe0.configure(cursor="fleur")
        self.Labelframe0.configure(highlightbackground="#d9d9d9")
        self.Labelframe0.configure(highlightcolor="#000000")

        self.Label2 = tk.Button(self.Labelframe0)
        self.Label2.place(x=10, y=23)
        self.Label2.configure(activebackground="#d9d9d9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="black")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="#000000")
        photo_location = os.path.join(self.assets, "folder.png")
        global _img1
        _img1 = tk.PhotoImage(file=photo_location)
        self.Label2.configure(image=_img1)

        self.Label10 = tk.Button(self.Labelframe0)
        self.Label10.place(x=10, y=82)
        self.Label10.configure(activebackground="#d9d9d9")
        self.Label10.configure(activeforeground="black")
        self.Label10.configure(anchor='w')
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(compound='left')
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(font="-family {Segoe UI} -size 9")
        self.Label10.configure(foreground="black")
        self.Label10.configure(highlightbackground="#d9d9d9")
        self.Label10.configure(highlightcolor="#000000")
        photo_location = os.path.join(self.assets, "folder.png")
        global _img2
        _img2 = tk.PhotoImage(file=photo_location)
        self.Label10.configure(image=_img2)

        self.Label13 = tk.Label(self.Labelframe0)
        self.Label13.place(x=64, y=140)
        self.Label13.configure(activebackground="#d9d9d9")
        self.Label13.configure(activeforeground="black")
        self.Label13.configure(anchor='w')
        self.Label13.configure(background="#d9d9d9")
        self.Label13.configure(compound='left')
        self.Label13.configure(disabledforeground="#a3a3a3")
        self.Label13.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label13.configure(foreground="black")
        self.Label13.configure(highlightbackground="#d9d9d9")
        self.Label13.configure(highlightcolor="#000000")
        self.Label13.configure(text="Input Model:")

        self.Label16 = tk.Label(self.Labelframe0)
        self.Label16.place(x=64, y=105, height=25, width=298)
        self.Label16.configure(activebackground="#d9d9d9")
        self.Label16.configure(activeforeground="black")
        self.Label16.configure(anchor='w')
        self.Label16.configure(background="#d9d9d9")
        self.Label16.configure(compound='left')
        self.Label16.configure(cursor="fleur")
        self.Label16.configure(disabledforeground="#a3a3a3")
        self.Label16.configure(font="-family {Segoe UI} -size 9")
        self.Label16.configure(foreground="black")
        self.Label16.configure(highlightbackground="#d9d9d9")
        self.Label16.configure(highlightcolor="#000000")
        self.Label16.configure(justify='left')
        self.Label16.configure(textvariable=self.dataset_path)

        self.Label11 = tk.Button(self.Labelframe0)
        self.Label11.place(x=10, y=140)
        self.Label11.configure(activebackground="#d9d9d9")
        self.Label11.configure(activeforeground="black")
        self.Label11.configure(anchor='w')
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(compound='left')
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(font="-family {Segoe UI} -size 9")
        self.Label11.configure(foreground="black")
        self.Label11.configure(highlightbackground="#d9d9d9")
        self.Label11.configure(highlightcolor="#000000")
        photo_location = os.path.join(self.assets, "folder.png")
        global _img3
        _img3 = tk.PhotoImage(file=photo_location)
        self.Label11.configure(image=_img3)

        self.Label12 = tk.Button(self.Labelframe0)
        self.Label12.place(x=10, y=199)
        self.Label12.configure(activebackground="#d9d9d9")
        self.Label12.configure(activeforeground="black")
        self.Label12.configure(anchor='w')
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(compound='left')
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(font="-family {Segoe UI} -size 9")
        self.Label12.configure(foreground="black")
        self.Label12.configure(highlightbackground="#d9d9d9")
        self.Label12.configure(highlightcolor="#000000")
        photo_location = os.path.join(self.assets, "folder.png")
        global _img4
        _img4 = tk.PhotoImage(file=photo_location)
        self.Label12.configure(image=_img4)

        self.Label17 = tk.Label(self.Labelframe0)
        self.Label17.place(x=64, y=164, height=25, width=298)
        self.Label17.configure(activebackground="#d9d9d9")
        self.Label17.configure(activeforeground="black")
        self.Label17.configure(anchor='w')
        self.Label17.configure(background="#d9d9d9")
        self.Label17.configure(compound='left')
        self.Label17.configure(disabledforeground="#a3a3a3")
        self.Label17.configure(font="-family {Segoe UI} -size 9")
        self.Label17.configure(foreground="black")
        self.Label17.configure(highlightbackground="#d9d9d9")
        self.Label17.configure(highlightcolor="#000000")
        self.Label17.configure(justify='left')
        self.Label17.configure(textvariable=self.model_path)

        self.Label20 = tk.Label(self.Labelframe0)
        self.Label20.place(x=64, y=222, height=25, width=280)
        self.Label20.configure(activebackground="#d9d9d9")
        self.Label20.configure(activeforeground="black")
        self.Label20.configure(anchor='w')
        self.Label20.configure(background="#d9d9d9")
        self.Label20.configure(compound='left')
        self.Label20.configure(disabledforeground="#a3a3a3")
        self.Label20.configure(font="-family {Segoe UI} -size 9")
        self.Label20.configure(foreground="black")
        self.Label20.configure(highlightbackground="#d9d9d9")
        self.Label20.configure(highlightcolor="#000000")
        self.Label20.configure(justify='left')
        self.Label20.configure(textvariable=self.results_path)

        self.Label15 = tk.Label(self.Labelframe0)
        self.Label15.place(x=64, y=199)
        self.Label15.configure(activebackground="#d9d9d9")
        self.Label15.configure(activeforeground="black")
        self.Label15.configure(anchor='w')
        self.Label15.configure(background="#d9d9d9")
        self.Label15.configure(compound='left')
        self.Label15.configure(disabledforeground="#a3a3a3")
        self.Label15.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label15.configure(foreground="black")
        self.Label15.configure(highlightbackground="#d9d9d9")
        self.Label15.configure(highlightcolor="#000000")
        self.Label15.configure(text="Output Directory:")

        self.Labelframe1 = tk.LabelFrame(self.Labelframe0)
        self.Labelframe1.place(x=10, y=351, height=100, width=343)
        self.Labelframe1.configure(relief='groove')
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(text="Image Settings")
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="#000000")

        self.Label18 = tk.Label(self.Labelframe1)
        self.Label18.place(x=10, y=59, height=28, width=54, bordermode='ignore')

        self.Label18.configure(activebackground="#d9d9d9")
        self.Label18.configure(activeforeground="black")
        self.Label18.configure(anchor='w')
        self.Label18.configure(background="#d9d9d9")
        self.Label18.configure(compound='left')
        self.Label18.configure(disabledforeground="#a3a3a3")
        self.Label18.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label18.configure(foreground="black")
        self.Label18.configure(highlightbackground="#d9d9d9")
        self.Label18.configure(highlightcolor="#000000")
        self.Label18.configure(text="Height:")

        self.Label6 = tk.Label(self.Labelframe1)
        self.Label6.place(x=10, y=24, height=28, width=44, bordermode='ignore')
        self.Label6.configure(activebackground="#d9d9d9")
        self.Label6.configure(activeforeground="black")
        self.Label6.configure(anchor='w')
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(compound='left')
        self.Label6.configure(cursor="fleur")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label6.configure(foreground="black")
        self.Label6.configure(highlightbackground="#d9d9d9")
        self.Label6.configure(highlightcolor="#000000")
        self.Label6.configure(text="Width:")

        self.Text2 = tk.Entry(self.Labelframe1, textvariable=self.image_width)
        self.Text2.place(x=60, y=59, height=20, width=85, bordermode='ignore')
        self.Text2.configure(background="#d9d9d9")
        self.Text2.configure(font="TkTextFont")
        self.Text2.configure(foreground="black")
        self.Text2.configure(highlightbackground="#d9d9d9")
        self.Text2.configure(highlightcolor="#000000")
        self.Text2.configure(insertbackground="#000000")
        self.Text2.configure(selectbackground="#d9d9d9")
        self.Text2.configure(selectforeground="black")

        self.Spinbox1 = tk.Spinbox(self.Labelframe1, from_=1.0, to=4.0)
        self.Spinbox1.place(x=232, y=24, height=22, width=45, bordermode='ignore')
        self.Spinbox1.configure(activebackground="#d9d9d9")
        self.Spinbox1.configure(background="#d9d9d9")
        self.Spinbox1.configure(disabledforeground="#a3a3a3")
        self.Spinbox1.configure(foreground="black")
        self.Spinbox1.configure(highlightbackground="#d9d9d9")
        self.Spinbox1.configure(highlightcolor="#000000")
        self.Spinbox1.configure(insertbackground="#000000")
        self.Spinbox1.configure(selectbackground="#d9d9d9")
        self.Spinbox1.configure(selectforeground="black")
        self.Spinbox1.configure(value=3)

        self.Label7 = tk.Label(self.Labelframe1)
        self.Label7.place(x=162, y=24, height=24, width=64, bordermode='ignore')
        self.Label7.configure(activebackground="#d9d9d9")
        self.Label7.configure(activeforeground="black")
        self.Label7.configure(anchor='w')
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(compound='left')
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label7.configure(foreground="black")
        self.Label7.configure(highlightbackground="#d9d9d9")
        self.Label7.configure(highlightcolor="#000000")
        self.Label7.configure(text="Channels:")

        self.Text1 = tk.Entry(self.Labelframe1, textvariable=self.image_height)
        self.Text1.place(x=60, y=24, height=20, width=85, bordermode='ignore')
        self.Text1.configure(background="#d9d9d9")
        self.Text1.configure(font="TkTextFont")
        self.Text1.configure(foreground="black")
        self.Text1.configure(highlightbackground="#d9d9d9")
        self.Text1.configure(highlightcolor="#000000")
        self.Text1.configure(insertbackground="#000000")
        self.Text1.configure(selectbackground="#d9d9d9")
        self.Text1.configure(selectforeground="black")

        self.Label19 = tk.Label(self.Labelframe0)
        self.Label19.place(x=20, y=293, height=25, width=105)
        self.Label19.configure(activebackground="#d9d9d9")
        self.Label19.configure(activeforeground="black")
        self.Label19.configure(anchor='w')
        self.Label19.configure(background="#d9d9d9")
        self.Label19.configure(compound='left')
        self.Label19.configure(disabledforeground="#a3a3a3")
        self.Label19.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label19.configure(foreground="black")
        self.Label19.configure(highlightbackground="#d9d9d9")
        self.Label19.configure(highlightcolor="#000000")
        self.Label19.configure(text="Output file format:")

        self.Label5 = tk.Label(self.Labelframe0)
        self.Label5.place(x=20, y=259, height=25, width=96)
        self.Label5.configure(activebackground="#d9d9d9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label5.configure(foreground="black")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="#000000")
        self.Label5.configure(text="Input file format:")

        self.Checkbutton1 = tk.Checkbutton(self.Labelframe0)
        self.Checkbutton1.place(x=20, y=316)
        self.Checkbutton1.configure(activebackground="#d9d9d9")
        self.Checkbutton1.configure(activeforeground="black")
        self.Checkbutton1.configure(anchor='w')
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(compound='left')
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Checkbutton1.configure(foreground="black")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="#000000")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text="Preprocess Filter")
        self.Checkbutton1.configure(variable=self.che77)

        self.TCombobox1 = ttk.Combobox(self.Labelframe0)
        self.TCombobox1.place(x=147, y=257, height=23, width=126)
        self.value_list = ["tiff","scn","png","jpg"]
        self.TCombobox1.configure(values=self.value_list)
        self.TCombobox1.configure(textvariable=self.input_format)
        self.TCombobox1.configure(takefocus="")
        self.TCombobox1.current(0)

        self.TCombobox2 = ttk.Combobox(self.Labelframe0)
        self.TCombobox2.place(x=147, y=293, height=23, width=126)
        self.value_list = ["tiff","scn","png","jpg"]
        self.TCombobox2.configure(values=self.value_list)
        self.TCombobox2.configure(font="-family {Segoe UI} -size 9")
        self.TCombobox2.configure(textvariable=self.output_format)
        self.TCombobox2.current(0)

        self.Label14 = tk.Label(self.Labelframe0)
        self.Label14.place(x=64, y=82)
        self.Label14.configure(activebackground="#d9d9d9")
        self.Label14.configure(activeforeground="black")
        self.Label14.configure(anchor='w')
        self.Label14.configure(background="#d9d9d9")
        self.Label14.configure(compound='left')
        self.Label14.configure(disabledforeground="#a3a3a3")
        self.Label14.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label14.configure(foreground="black")
        self.Label14.configure(highlightbackground="#d9d9d9")
        self.Label14.configure(highlightcolor="#000000")
        self.Label14.configure(text="Input Dataset:")

        self.Label4 = tk.Label(self.Labelframe0, textvariable=self.data_directory)
        self.Label4.place(x=64, y=47, height=25, width=280)
        self.Label4.configure(activebackground="#d9d9d9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(anchor='w')
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(compound='left')
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="black")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="#000000")
        self.Label4.configure(justify='left')

        self.Label3 = tk.Label(self.Labelframe0)
        self.Label3.place(x=64, y=23)
        self.Label3.configure(activebackground="#d9d9d9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label3.configure(foreground="black")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="#000000")
        self.Label3.configure(text="Input Directory:")

        self.Labelframe2 = tk.LabelFrame(self.top)
        self.Labelframe2.place(x=640, y=0, height=467, width=247)
        self.Labelframe2.configure(relief='groove')
        self.Labelframe2.configure(foreground="black")
        self.Labelframe2.configure(text="Results")
        self.Labelframe2.configure(background="#d9d9d9")
        self.Labelframe2.configure(highlightbackground="#d9d9d9")
        self.Labelframe2.configure(highlightcolor="#000000")

        self.Label8 = tk.Label(self.Labelframe2)
        self.Label8.place(x=7, y=22, height=24, width=94, bordermode='ignore')
        self.Label8.configure(activebackground="#d9d9d9")
        self.Label8.configure(activeforeground="black")
        self.Label8.configure(anchor='w')
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(compound='left')
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(font="-family {Segoe UI} -size 9 -weight bold")
        self.Label8.configure(foreground="black")
        self.Label8.configure(highlightbackground="#d9d9d9")
        self.Label8.configure(highlightcolor="#000000")
        self.Label8.configure(justify='left')
        self.Label8.configure(text="Models Status:")

        self.Label9 = tk.Label(self.Labelframe2)
        self.Label9.place(x=103, y=22, height=24, width=114, bordermode='ignore')

        self.Label9.configure(activebackground="#d9d9d9")
        self.Label9.configure(activeforeground="black")
        self.Label9.configure(anchor='w')
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(compound='left')
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="black")
        self.Label9.configure(highlightbackground="#d9d9d9")
        self.Label9.configure(highlightcolor="#000000")
        self.Label9.configure(text="No model loaded.")

        self.Button5 = tk.Button(self.Labelframe2)
        self.Button5.place(x=8, y=77, height=26, width=227, bordermode='ignore')
        self.Button5.configure(activebackground="#d9d9d9")
        self.Button5.configure(activeforeground="black")
        self.Button5.configure(background="#d9d9d9")
        self.Button5.configure(disabledforeground="#a3a3a3")
        self.Button5.configure(foreground="black")
        self.Button5.configure(highlightbackground="#d9d9d9")
        self.Button5.configure(highlightcolor="#000000")
        self.Button5.configure(text="Kaplan-Meir Graph")

        self.Button6 = tk.Button(self.Labelframe2)
        self.Button6.place(x=10, y=110, height=26, width=227, bordermode='ignore')
        self.Button6.configure(activebackground="#d9d9d9")
        self.Button6.configure(activeforeground="black")
        self.Button6.configure(background="#d9d9d9")
        self.Button6.configure(disabledforeground="#a3a3a3")
        self.Button6.configure(foreground="black")
        self.Button6.configure(highlightbackground="#d9d9d9")
        self.Button6.configure(highlightcolor="#000000")
        self.Button6.configure(text="Anova Table")

        self.Button7 = tk.Button(self.Labelframe2)
        self.Button7.place(x=10, y=140, height=26, width=227, bordermode='ignore')
        self.Button7.configure(activebackground="#d9d9d9")
        self.Button7.configure(activeforeground="black")
        self.Button7.configure(background="#d9d9d9")
        self.Button7.configure(disabledforeground="#a3a3a3")
        self.Button7.configure(foreground="black")
        self.Button7.configure(highlightbackground="#d9d9d9")
        self.Button7.configure(highlightcolor="#000000")
        self.Button7.configure(text="Cox Analysis")

        self.Button8 = tk.Button(self.Labelframe2)
        self.Button8.place(x=10, y=170, height=26, width=227, bordermode='ignore')
        self.Button8.configure(activebackground="#d9d9d9")
        self.Button8.configure(activeforeground="black")
        self.Button8.configure(background="#d9d9d9")
        self.Button8.configure(cursor="fleur")
        self.Button8.configure(disabledforeground="#a3a3a3")
        self.Button8.configure(foreground="black")
        self.Button8.configure(highlightbackground="#d9d9d9")
        self.Button8.configure(highlightcolor="#000000")
        self.Button8.configure(text="Feature Distribution Groups")

        self.Button9 = tk.Button(self.Labelframe2)
        self.Button9.place(x=10, y=200, height=26, width=227, bordermode='ignore')
        self.Button9.configure(activebackground="#d9d9d9")
        self.Button9.configure(activeforeground="black")
        self.Button9.configure(background="#d9d9d9")
        self.Button9.configure(disabledforeground="#a3a3a3")
        self.Button9.configure(foreground="black")
        self.Button9.configure(highlightbackground="#d9d9d9")
        self.Button9.configure(highlightcolor="#000000")
        self.Button9.configure(text="Intensity Distribution")
        self.Button9.configure(state="disabled")

        self.Button10 = tk.Button(self.Labelframe2)
        self.Button10.place(x=10, y=230, height=26, width=227, bordermode='ignore')
        self.Button10.configure(activebackground="#d9d9d9")
        self.Button10.configure(activeforeground="black")
        self.Button10.configure(background="#d9d9d9")
        self.Button10.configure(disabledforeground="#a3a3a3")
        self.Button10.configure(foreground="black")
        self.Button10.configure(highlightbackground="#d9d9d9")
        self.Button10.configure(highlightcolor="#000000")
        self.Button10.configure(text="Generate Report (PDF)")
        self.Button10.configure(state="disabled")

        self.TProgressbar1 = ttk.Progressbar(self.Labelframe2)
        self.TProgressbar1.place(x=7, y=44, width=232, height=19, bordermode='ignore')
        self.TProgressbar1.configure(length="100")

        ##############################
        # Functionality              #
        ##############################
        self.Label2 .configure(command=self.DataDirectorySelection)
        self.Label10.configure(command=self.InputDatasetSelection)
        self.Label11.configure(command=self.InputModelSelection)
        self.Label12.configure(command=self.OutputDirectorySelection)

        self.Button1.configure(command=self.PreProcessData)
        self.Button2.configure(command=self.NormalizeDataset)
        self.Button3.configure(command=self.SetupFeatureExtraction)
        self.Button4.configure(command=self.TrainModels)

        self.Button5.configure(command=self.KaplanMeierGraph)
        self.Button6.configure(command=self.AnovaTable)
        self.Button7.configure(command=self.CoxAnalysis)
        self.Button8.configure(command=self.FeatureDistributionGroups)
        # self.Button9 .configure(command=self.IntensityDistribution)
        # self.Button10.configure(command=self.GenerateReport)

    ##############################
    # Logic                      #
    ##############################
    def DataDirectorySelection(self):
        tkinter.messagebox.showinfo("Pathomics 4", "Please select the data directory.")
        folder = r"" + tkinter.filedialog.askdirectory(initialdir = '.')
        self.data_directory.set(folder)

    def InputDatasetSelection(self):
        tkinter.messagebox.showinfo("Pathomics 4", "Please select the dataset directory.")
        folder = r"" + tkinter.filedialog.askdirectory(initialdir = '.')
        self.dataset_path.set(folder)

    def InputModelSelection(self):
        if self.choose_model:
            tkinter.messagebox.showinfo("Pathomics 4", "Please select the normalization model.")
            filetypes = (('All files', '*.*'), ('Keras Model (Old)', '*.h5'), ('Keras Model', '*.keras'))
            path = r"" + tkinter.filedialog.askopenfilename(initialdir = self.dataset_path.get(), filetypes = filetypes)
        path = r"" + os.path.join(self.assets, "NormModel.h5")
        self.model_path.set(path)
        self.Label9.configure(text="Norm Model Loaded.")

    def OutputDirectorySelection(self):
        tkinter.messagebox.showinfo("Pathomics 4", "Please select the results directory.")
        path = r"" + tkinter.filedialog.askdirectory(initialdir = '.')
        self.results_path.set(path)

    def PreProcessData(self):
        if self.dataset_path.get() == "Not selected":
            tkinter.messagebox.showinfo("Pathomics 4", "Dataset directory is not set.")
            return

        if self.results_path.get() == "Not selected":
            tkinter.messagebox.showinfo("Pathomics 4", "Results directory is not set.")
            return

        # Save variables in class for the Normalization algorithm to use.
        processed_path = os.path.join(self.dataset_path.get(), "Processed")
        os.makedirs(processed_path,                            exist_ok=True)
        os.makedirs(os.path.join(processed_path, "color"),     exist_ok=True)
        os.makedirs(os.path.join(processed_path, "grayscale"), exist_ok=True)
        os.makedirs(os.path.join(processed_path, "combined"),  exist_ok=True)
        os.makedirs(self.results_path.get(),                   exist_ok=True)
        self.shape = (256, 256, 3)

        # Generate basic processed dataset.
        print(f"Splitting original images into 256x256 (color, grayscale & combined).")
        size = 0
        for i, image in enumerate(inputs.load_dataset(self.dataset_path.get(), suffix=self.input_format.get())):
            color, grayscale, combined = preprocess.process_image(image, self.shape)
            outputs.save_dataset(os.path.join(self.dataset_path.get(),         "Processed", "color"),     color,     offset=size, suffix=self.output_format.get())
            outputs.save_dataset(os.path.join(self.dataset_path.get(),         "Processed", "grayscale"), grayscale, offset=size, suffix=self.output_format.get())
            size += outputs.save_dataset(os.path.join(self.dataset_path.get(), "Processed", "combined"),  combined,  offset=size, suffix=self.output_format.get())
        print(f"Done Preprocessing {size} images.", flush=True)

    def load_norm_dataset(self, path, suffix="tiff"):
        if not os.path.exists(path):
            return []

        dataset = [os.path.join(path, file) for file in os.listdir(path)]
        dataset = list(filter(os.path.isfile, dataset))
        dataset = list(filter(lambda item: item.endswith(suffix), dataset))
        dataset = list(map(os.path.abspath, dataset))

        for full_path in dataset:
            image = imageio.imread(full_path).astype(float)
            h, w, _ = image.shape
            half_w  = int(w / 2)
            grayscale = image[:, half_w:, :3]
            grayscale = numpy.array([grayscale]) / 127.5 - 1.
            yield grayscale

    def NormalizeDataset(self):
        if self.dataset_path.get() == "Not selected":
            tkinter.messagebox.showinfo("Pathomics 4", "Dataset directory is not set.")
            return

        path = os.path.join(self.dataset_path.get(), "Processed", "grayscale")
        if not os.path.exists(path):
            tkinter.messagebox.showinfo("Pathomics 4", "Dataset directory does not exist.")
            return

        if self.model_path.get() == "Not selected":
            tkinter.messagebox.showinfo("Pathomics 4", "Model is not loaded.")
            return

        if self.results_path.get() == "Not selected":
            tkinter.messagebox.showinfo("Pathomics 4", "Results directory is not set.")
            return

        model = keras.models.load_model(self.model_path.get())
        dataset = self.load_norm_dataset(os.path.join(self.dataset_path.get(), "Processed", "combined"), suffix=self.input_format.get())
        normalized = []
        for i, image in enumerate(dataset):
            parsed_image = numpy.array(image, dtype=float)
            normalized.append(logic.normalize(model, parsed_image))
        outputs.save_dataset(self.results_path.get(), normalized, offset=0, suffix=self.output_format.get())
        self.Label9.configure(text="Done Normalizing.")

    def SetupFeatureExtraction(self):
        summary_table = r"" + os.path.join(self.data_directory.get(), 'summary_table_GUI.csv')
        data_file = pandas.read_csv(summary_table)
        rawdata = data_file.iloc[:,1:]
        rawdata.to_pickle(os.path.join(self.data_directory.get(), 'rawdata.pickle'))
        rawdata = pandas.read_pickle(os.path.join(self.data_directory.get(), 'rawdata.pickle'))
        rawdata.to_csv(os.path.join(self.data_directory.get(), 'Test1.csv'))
        labels = data_file = data_file.iloc[:,:1]
        mousedata = {'Mouse':data_file['Image'].str[2:6]} #Gets the mouse characters from the 32 character code in a seperate vector
        linedata = {'Line':data_file['Image'].str[21:25]}
        slicedata = {'Series':data_file['Image'].str[38:47]}
        posdata = {'Patch Position (X_Y)':data_file['Image'].str[48:]}
        codedata = {'CodeSeries':data_file['Image'].str[:47]}
        Mouse = pandas.DataFrame(mousedata)
        Lines = pandas.DataFrame(linedata)
        Slice = pandas.DataFrame(slicedata)
        Position = pandas.DataFrame(posdata)
        Code = pandas.DataFrame(codedata)
        Position['Patch Position (X_Y)'] = Position['Patch Position (X_Y)'].str.replace('.png.png.txt', '')
        labels = pandas.concat([Mouse,Lines,Slice,Code,data_file['Image']],axis = 1)

        X_ROI = []
        Y_ROI = []

        for i in Position['Patch Position (X_Y)']:
            d= i.split('_',1)
            xroi = int(d[0])
            yroi = int(d[1])
            X_ROI.append(xroi)
            Y_ROI.append(yroi)
        labels = labels.reset_index()
        labels = pandas.concat([labels,pandas.DataFrame(X_ROI, columns=["X_ROI"]), pandas.DataFrame(Y_ROI, columns=["Y_ROI"])],axis = 1)
        del labels['index']
        labels.to_pickle(os.path.join(self.data_directory.get(), 'rawlabel.pickle'))
        rawlabels = pandas.read_pickle(os.path.join(self.data_directory.get(), 'rawlabel.pickle'))
        self.Label9.configure(text="Ready to Train.")

    def TrainModels(self):
        global Groups

        label = 'Mouse' #define desired label here
        if label == 'Line':
            rawdf = pandas.concat([rawlabels['Line'],rawdata],axis=1)
            rawdf = rawdf[rawdf.Line != '0000']
            rawlabels = rawlabels[rawlabels.Line != '0000']
            rawdf.drop('Line',axis=1, inplace=True)
            rawdata = rawdf.copy()
            rawdata.to_pickle(os.path.join(self.data_directory.get(), 'rawdata_line.pickle'))
            rawlabels.to_pickle(os.path.join(self.data_directory.get(), 'rawlabel_line.pickle'))
            rawdata = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawdata_line.pickle')) #Change to rawdata_line if running Line
            rawlabel = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawlabel_line.pickle'))
        else:
            rawdata = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawdata.pickle'))
            rawlabel = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawlabel.pickle'))

        # rawdata = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawdata_line.pickle')) #Change to rawdata_line if running Line
        rawdatacopy = rawdata.copy()
        zscore_rawdata = utils.zScoreEach(rawdatacopy)
        rawlabel = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawlabel.pickle'))
        # rawlabel = pandas.read_pickle(os.path.join(self.data_directory.get(),'rawlabel_line.pickle')) #Change to rawlabels_line if running Line

        my_list = zscore_rawdata.columns.values.tolist()
        X = zscore_rawdata[my_list].values
        X = pandas.DataFrame(X).fillna(value=0).values
        y = rawlabel[label].values.ravel()


        # define random forest classifier, with utilising all cores and
        # sampling in proportion to y labels
        rf = sklearn.ensemble.RandomForestClassifier(n_jobs=-1, class_weight='balanced', max_depth=5)

        # define Boruta feature selection method
        feat_selector = boruta.BorutaPy(rf, n_estimators='auto', verbose=2, random_state=1)

        # find all relevant features - 5 features should be selected
        feat_selector.fit(X, y)

        # check selected features - first 5 features are selected
        feat_selector.support_

        # check ranking of features
        feat_selector.ranking_

        final_features = list()
        indexes = numpy.where(feat_selector.support_ == True)
        for x in numpy.nditer(indexes):
            final_features.append(my_list[x])

        pic = rawdata[final_features]
        piclabels = rawlabel.copy()
        rawlabels = piclabels

        # Replaced pic.pickle data with actual rawdata from file.
        pic = pandas.read_pickle(os.path.join(self.data_directory.get(), 'pic.pickle'))
        piclabels = rawlabel.copy()

        with open(os.path.join(self.data_directory.get(), 'pic.pickle'), "wb") as f:
            pickle.dump((pic[0], piclabels), f)

        with open(os.path.join(self.data_directory.get(), 'pic.pickle'), "rb") as f: #Include the '_line' if you are running Line/QTL analysis!
            rawdata, rawlabels = pickle.load(f)

        features = rawdata.columns.values.tolist()

        Groups = 'Mouse'
        pca_df, pca, pca_transformed = utils.pca.pcaCalcOneExp(Groups, utils.zScoreEach(rawdata),rawlabels[Groups],'PCA',-1,nColor=0,nShades=0)
        K=range(1,12)
        wss = []
        for k in K:
            kmeans = sklearn.cluster.KMeans(n_clusters=k, init="k-means++")
            kmeans = kmeans.fit(rawdata)
            wss_iter = kmeans.inertia_
            wss.append(wss_iter)

        maximum = 0
        clusters = 0
        global num_of_clusters
        for i in range(3,13):
            labels = sklearn.cluster.KMeans(n_clusters=i,init="k-means++",random_state=200).fit(rawdata).labels_
            if maximum < sklearn.metrics.silhouette_score(rawdata,labels,metric="euclidean",sample_size=1000,random_state=200):
                     maximum = sklearn.metrics.silhouette_score(rawdata,labels,metric="euclidean",sample_size=1000,random_state=200)
                     num_of_clusters = i
        kmeans_pca,xlim_kmeans,ylim_kmeans = utils.kmeans.kmeansPlot(num_of_clusters,pca_transformed,pca,rawlabels[Groups])


        kmeans_pca.to_csv(os.path.join(self.data_directory.get(),'kmeans_pca.csv'))
        rawlabels.to_pickle(os.path.join(self.data_directory.get(), 'rawlabel_line.pickle'))
        self.Label9.configure(text="Model Ready.")

    def KaplanMeierGraph(self):
        global Groups
        Groups ='Mouse'
        with open(os.path.join(self.data_directory.get(), 'pic.pickle'), "rb") as f: #Include the '_line' if you are running Line/QTL analysis!
            rawdata,rawlabels = pickle.load(f)
        array = rawlabels[Groups]
        labels = list(array)
        kmeans_pca=pandas.read_csv(os.path.join(self.data_directory.get(),'kmeans_pca.csv'))
        kgroups = kmeans_pca['Groups']
        pred = list(kgroups)
        a = dict(collections.Counter(array))
        df = pandas.DataFrame({'Labels': labels, 'Clusters': pred})
        ct = pandas.crosstab(df['Labels'], df['Clusters'],normalize = 'index')
        fig, ax = matplotlib.pyplot.subplots(figsize=(20,10))
        seaborn.heatmap(ct, annot=True)
        ax.set_ylim([len(numpy.unique(array)),0])
        for t in ax.texts: t.set_text(math.floor(float(t.get_text())*100))
        for t in ax.texts: t.set_text((t.get_text()) + "%")
        KM_filename = 'ByGroups_QTL3.csv'
        with open(os.path.join(self.data_directory.get(), KM_filename),'w') as outfile:
            ct.to_csv(outfile, header=True)
        matplotlib.pyplot.savefig(os.path.join(self.data_directory.get(),'Confusion matrix.png'))
        matplotlib.pyplot.clf()
        data2=pandas.read_csv(os.path.join(self.data_directory.get(), 'ByGroups_QTL3.csv'))
        data2['Age']=0
        data2['L/D']=1
        data1= pandas.read_csv(os.path.join(self.data_directory.get(), 'mice.csv'))
        for i in range(len(data2)):
            for j in range(len(data1)):
                if data2['Labels'][i]==data1['Mouse'][j]:
                    data2['Age'][i]=data1['Age'][j]
                    data2['L/D'][i]=data1['L/D'][j]
                    j+=1
            i+=1
        data2=data2[data2['Age']>0]
        data2=data2.reset_index()
        data3=data2.drop(["Labels","Age","L/D"],axis=1)
        data3=data3.drop(["index"],axis=1)
        data3['Max']=data3.max(axis=1)
        for i in range(3):
            for j in range(len(data2)):
                if data2[str(i)][j]>=data3['Max'][j]:  #Threshold needs to be optimized
                    data2[str(i)][j]=1
                else:
                    data2[str(i)][j]=0
                j+=1
            i+=1
        utils.to_groups(data2)
        kmf = lifelines.KaplanMeierFitter()
        T=data2['Age']
        headings=data2.columns.tolist()
        for i in range(len(headings)-5):
            kmf.fit(T,data2[headings[i+2]],label=headings[i+2]+' (n=%d)'%data2[headings[i+2]].tolist().count(1))
            kmf.plot(linewidth=3.0)
            i+=1
        figure = matplotlib.pyplot.gcf()
        figure.set_size_inches(10,6)
        matplotlib.pyplot.title('Survival Function of Mice Within Groups');
        matplotlib.pyplot.xlabel('Months')
        groups = list()
        for i, (a0, a1, a2) in enumerate(zip(data2['0'], data2['1'], data2['2'])):
            if a0 == 1:
                groups.append(0)
            elif a1 == 1:
                groups.append(1)
            else:
                groups.append(2)
        data2['Groups'] = groups
        data2.to_csv(os.path.join(self.data_directory.get(),'Kaplan meier data.csv'))
        results = lifelines.statistics.multivariate_logrank_test(data2['Age'], data2['Groups'], data2['L/D'], weightings='wilcoxon') #log rank analysis
        matplotlib.pyplot.text(0.5, 0.3, 'p value = ' + str(results.p_value), color='b', font='bold')
        matplotlib.pyplot.savefig(os.path.join(self.data_directory.get(),'Kaplan meier graph.png'))

    def AnovaTable(self):
        rawdata=pandas.read_pickle(os.path.join(self.data_directory.get(),'rawdata.pickle'))
        features = rawdata.columns.values.tolist()
        kmeans_pca=pandas.read_csv(os.path.join(self.data_directory.get(),'kmeans_pca.csv'))
        rawdata.reset_index(drop=True, inplace=True)
        kmeans_pca.reset_index(drop=True, inplace=True)
        raw3 = pandas.concat([rawdata,kmeans_pca],axis=1)
        Data_anov=utils.anova.anova_desc_table(raw3, features, title='Sarcoma Mouse 3 Groups',dep = 'Groups',groupList =['Group A','Group B','Group C',]) #Change groupList based on your num_of_clusters
        Data_anov.to_excel(os.path.join(self.data_directory.get(),'Anova table.xlsx'))
        Data_anov.insert(0, "Features", Data_anov.index)
        anova_frame=Frame(self.w1)
        style=tkinter.ttk.Style()
        style.configure("Treeview",background="grey",foreground="black",rowheight=30,colheight=500)
        anova_frame.pack(side=BOTTOM,pady=55,padx=40)
        tree_scrollx=Scrollbar(anova_frame,orient='horizontal')
        tree_scrollx.pack(side=BOTTOM,fill=X)
        tree_scrolly=Scrollbar(anova_frame)
        tree_scrolly.pack(side=RIGHT,fill=Y)
        tv1=tkinter.ttk.Treeview(anova_frame,yscrollcommand=tree_scrolly.set,xscrollcommand=tree_scrollx.set)
        tv1.place(relheight=50, relwidth=20)
        tv1["column"]=list(Data_anov.columns)
        tv1["show"]="headings"
        for column in tv1["column"]:
            tv1.heading(column, text=column)
        df_rows=Data_anov.to_numpy().tolist()
        for row in df_rows:
            tv1.insert("","end",values=row)
        tree_scrolly.config(command=tv1.yview)
        tree_scrollx.config(command=tv1.xview)
        tv1.pack(side=BOTTOM,padx=35,pady=5)

    def CoxAnalysis(self):
        data_cox=pandas.read_csv(os.path.join(self.data_directory.get(),'Kaplan meier data.csv'))
        for i in range(len(data_cox)):
            if data_cox['Groups'][i]== 'A':
                data_cox['Groups'][i]= 1
            if data_cox['Groups'][i]== 'B':
                data_cox['Groups'][i]= 2
            if data_cox['Groups'][i]== 'C':
                data_cox['Groups'][i]= 3
            if data_cox['Groups'][i]== 'Ignore':
                data_cox['Groups'][i]= 0
        data_cox=data_cox.drop(['Unnamed: 0','index'],axis=1)

        # One may add these in dependednt on the optimal ammount of clusters
        cph = lifelines.CoxPHFitter(penalizer=0.1)
        cph.fit(data_cox,'Age',event_col='L/D',show_progress=True)
        cph.print_summary()

    def FeatureDistributionGroups(self):
        global Groups
        rawdata=pandas.read_pickle(os.path.join(self.data_directory.get(),'rawdata.pickle'))
        features = rawdata.columns.values.tolist()
        rawdata.reset_index(drop=True, inplace=True)
        rawlabels=pandas.read_pickle(os.path.join(self.data_directory.get(),'rawlabel.pickle'))
        rawlabels.reset_index(drop=True, inplace=True)
        kmeans_pca=pandas.read_csv(os.path.join(self.data_directory.get(),'kmeans_pca.csv'))
        kmeans_pca['Groups'].reset_index(drop=True, inplace=True)
        raw2 = pandas.concat([rawdata,rawlabels,kmeans_pca['Groups']],axis =1)
        Groups = 'Groups'
        utils.kmeans.histogramDataKDELabels(range(3),raw2,features,0,Par=Groups,nColor=0, nShades=0)

    def IntensityDistribution(self):
        pass

    def GenerateReport(self):
        pdf= fpdf.FPDF()
        pdf.add_page()
        pdf.set_font("Arial",size=15)
        pdf.cell(200,10,txt="Pathomics 4",ln=1, align='C')
        pdf.cell(200,10,txt="Report for Analysis",ln=2, align='C')
        pdf.cell(200,10,txt="Confusion Matrix",ln=3, align='LC')
        pdf.cell(200,10,txt="",ln=4, align='LC')
        pdf.cell(200,10,txt="",ln=5, align='LC')
        pdf.cell(200,10,txt="",ln=6, align='LC')
        pdf.cell(200,10,txt="",ln=7, align='LC')
        pdf.cell(200,10,txt="",ln=8, align='LC')
        pdf.cell(200,10,txt="",ln=9, align='LC')
        pdf.cell(200,10,txt="",ln=10, align='LC')
        pdf.cell(200,10,txt="",ln=11, align='LC')
        pdf.cell(200,10,txt="",ln=12, align='LC')
        pdf.cell(200,10,txt="",ln=13, align='LC')
        pdf.cell(200,10,txt="",ln=14, align='LC')
        pdf.cell(200,10,txt="This is the confusion matrix according to mice number and we may see how the",ln=15, align='LC')
        pdf.cell(200,10,txt="mice are clustered",ln=16, align='LC')
        pdf.output(self.folder+r'\Analysis.pdf')
        pdf_image(r'\Confusion matrix.png',0,280,r'\Analysis.pdf',0)
        #page2
        pdf1= fpdf.FPDF()
        pdf1.add_page()
        pdf1.set_font("Arial",size=15)
        pdf1.cell(200,10,txt="Kaplan Meier Graph",ln=3, align='LC')
        pdf1.cell(200,10,txt="",ln=4, align='LC')
        pdf1.cell(200,10,txt="",ln=5, align='LC')
        pdf1.cell(200,10,txt="",ln=6, align='LC')
        pdf1.cell(200,10,txt="",ln=7, align='LC')
        pdf1.cell(200,10,txt="",ln=8, align='LC')
        pdf1.cell(200,10,txt="",ln=9, align='LC')
        pdf1.cell(200,10,txt="",ln=10, align='LC')
        pdf1.cell(200,10,txt="",ln=11, align='LC')
        pdf1.cell(200,10,txt="",ln=12, align='LC')
        pdf1.cell(200,10,txt="",ln=13, align='LC')
        pdf1.cell(200,10,txt="",ln=14, align='LC')
        pdf1.cell(200,10,txt="This is the Kaplan Meier survival curve according to mice number and we may see how the",ln=19, align='LC')
        pdf1.cell(200,10,txt="clusters survive",ln=20, align='LC')
        pdf1.output(self.folder+r'\Page_2.pdf')
        pdf_image(r'\Kaplan meier graph.png',0,250,r'\Page_2.pdf',1)
        pdf_merge('Analysis_new.pdf','Page_2.pdf')

        #deleting temporary pdfs
        if os.path.exists("Page_2.pdf"):
            os.remove("Page_2.pdf")

        if os.path.exists("Analysis_new.pdf"):
            os.remove("Analysis_new.pdf")